venv) apple@iMac my_fast_api % docker-compose logs
pgadmin_container  | NOTE: Configuring authentication for SERVER mode.
pgadmin_container  |
pgadmin_container  | [2021-11-21 19:13:10 +0000] [1] [INFO] Starting gunicorn 20.1.0
pgadmin_container  | [2021-11-21 19:13:10 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
pgadmin_container  | [2021-11-21 19:13:10 +0000] [1] [INFO] Using worker: gthread
pgadmin_container  | [2021-11-21 19:13:10 +0000] [88] [INFO] Booting worker with pid: 88
pgadmin_container  | 2021-11-21 19:14:04,476: ERROR     pgadmin:        400 Bad Request: The CSRF session token is missing.
pgadmin_container  | Traceback (most recent call last):
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask_wtf/csrf.py", line 257, in protect
pgadmin_container  |     validate_csrf(self._get_csrf_token())
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask_wtf/csrf.py", line 95, in validate_csrf
pgadmin_container  |     raise ValidationError('The CSRF session token is missing.')
pgadmin_container  | wtforms.validators.ValidationError: The CSRF session token is missing.
pgadmin_container  |
pgadmin_container  | During handling of the above exception, another exception occurred:
pgadmin_container  |
pgadmin_container  | Traceback (most recent call last):
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask/app.py", line 1948, in full_dispatch_request
pgadmin_container  |     rv = self.preprocess_request()
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask/app.py", line 2242, in preprocess_request
pgadmin_container  |     rv = func()
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask_wtf/csrf.py", line 225, in csrf_protect
pgadmin_container  |     self.protect()
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask_wtf/csrf.py", line 260, in protect
pgadmin_container  |     self._error_response(e.args[0])
pgadmin_container  |   File "/venv/lib/python3.9/site-packages/flask_wtf/csrf.py", line 303, in _error_response
pgadmin_container  |     raise CSRFError(reason)
pgadmin_container  | flask_wtf.csrf.CSRFError: 400 Bad Request: The CSRF session token is missing.
pgadmin_container  | ::ffff:172.22.0.1 - - [21/Nov/2021:19:14:04 +0000] "POST /settings/save_tree_state/ HTTP/1.1" 400 150 "http://localhost:5050/browser/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
pgadmin_container  | ::ffff:172.22.0.1 - - [21/Nov/2021:19:14:04 +0000] "POST /misc/cleanup HTTP/1.1" 200 0 "http://localhost:5050/browser/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
pg_db_container4   | The files belonging to this database system will be owned by user "postgres".
pg_db_container4   | This user must also own the server process.
pg_db_container4   |
pg_db_container4   | The database cluster will be initialized with locale "en_US.utf8".
pg_db_container4   | The default database encoding has accordingly been set to "UTF8".
pg_db_container4   | The default text search configuration will be set to "english".
pg_db_container4   |
pg_db_container4   | Data page checksums are disabled.
pg_db_container4   |
pg_db_container4   | fixing permissions on existing directory /var/lib/postgresql/data ... ok
pg_db_container4   | creating subdirectories ... ok
pg_db_container4   | selecting dynamic shared memory implementation ... posix
pg_db_container4   | selecting default max_connections ... 100
pg_db_container4   | selecting default shared_buffers ... 128MB
pg_db_container4   | selecting default time zone ... Etc/UTC
pg_db_container4   | creating configuration files ... ok
pg_db_container4   | running bootstrap script ... ok
pg_db_container4   | performing post-bootstrap initialization ... ok
pg_db_container4   | syncing data to disk ... ok
pg_db_container4   |
pg_db_container4   | initdb: warning: enabling "trust" authentication for local connections
pg_db_container4   | You can change this by editing pg_hba.conf or using the option -A, or
pg_db_container4   | --auth-local and --auth-host, the next time you run initdb.
pg_db_container4   |
pg_db_container4   | Success. You can now start the database server using:
pg_db_container4   |
pg_db_container4   |     pg_ctl -D /var/lib/postgresql/data -l logfile start
pg_db_container4   |
pg_db_container4   | waiting for server to start....2021-11-21 19:12:52.844 UTC [48] LOG:  starting PostgreSQL 14.1 (Debian 14.1-1.pgdg110+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit
pg_db_container4   | 2021-11-21 19:12:52.862 UTC [48] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
pg_db_container4   | 2021-11-21 19:12:52.928 UTC [49] LOG:  database system was shut down at 2021-11-21 19:12:50 UTC
pg_db_container4   | 2021-11-21 19:12:52.946 UTC [48] LOG:  database system is ready to accept connections
pg_db_container4   |  done
pg_db_container4   | server started
pg_db_container4   | CREATE DATABASE
pg_db_container4   |
pg_db_container4   |
pg_db_container4   | /usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/create_tables.sql
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | CREATE TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   | ALTER TABLE
pg_db_container4   |
pg_db_container4   |
pg_db_container4   | /usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/init.sql
pg_db_container4   | CREATE ROLE
pg_db_container4   | CREATE DATABASE
pg_db_container4   | GRANT
pg_db_container4   |
pg_db_container4   |
pg_db_container4   | /usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/make_echo.sh
pg_db_container4   | The current directory is:
pg_db_container4   | /
pg_db_container4   | The user logged in is:
pg_db_container4   | postgres
pg_db_container4   |
pg_db_container4   | 2021-11-21 19:12:58.845 UTC [48] LOG:  received fast shutdown request
pg_db_container4   | waiting for server to shut down...2021-11-21 19:12:58.847 UTC [48] LOG:  aborting any active transactions
pg_db_container4   | 2021-11-21 19:12:58.858 UTC [48] LOG:  background worker "logical replication launcher" (PID 55) exited with exit code 1
pg_db_container4   | 2021-11-21 19:12:58.859 UTC [50] LOG:  shutting down
pg_db_container4   | .2021-11-21 19:12:58.911 UTC [48] LOG:  database system is shut down
pg_db_container4   |  done
pg_db_container4   | server stopped
pg_db_container4   |
pg_db_container4   | PostgreSQL init process complete; ready for start up.
pg_db_container4   |
pg_db_container4   | 2021-11-21 19:12:59.243 UTC [1] LOG:  starting PostgreSQL 14.1 (Debian 14.1-1.pgdg110+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit
pg_db_container4   | 2021-11-21 19:12:59.244 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
pg_db_container4   | 2021-11-21 19:12:59.244 UTC [1] LOG:  listening on IPv6 address "::", port 5432
pg_db_container4   | 2021-11-21 19:12:59.249 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
pg_db_container4   | 2021-11-21 19:12:59.289 UTC [68] LOG:  database system was shut down at 2021-11-21 19:12:58 UTC
pg_db_container4   | 2021-11-21 19:12:59.334 UTC [1] LOG:  database system is ready to accept connections
